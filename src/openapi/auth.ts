/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/airflow/{user_id}/link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         *  Get Link
         * @description Получить данные внешнего аккаунт пользователя
         *
         *     Получить данные может администратор или сам пользователь
         */
        get: operations["_get_link_airflow__user_id__link_get"];
        put?: never;
        /**
         *  Link
         * @description Привязать пользователю внешний аккаунт
         *
         *     Привязать аккаунт может только администратор
         */
        post: operations["_link_airflow__user_id__link_post"];
        /**
         *  Unlink
         * @description Отвязать внешний аккаунт пользователю
         *
         *     Удалить данные может администратор
         */
        delete: operations["_unlink_airflow__user_id__link_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/authentic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         *  Unregister
         * @description Отключает для пользователя метод входа
         */
        delete: operations["_unregister_authentic_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/authentic/auth_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         *  Auth Url
         * @description URL на который происходит редирект из приложения для авторизации на стороне провайдера
         */
        get: operations["_auth_url_authentic_auth_url_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/authentic/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         *  Login
         * @description Вход в пользователя с помощью аккаунта Authentic
         */
        post: operations["_login_authentic_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/authentic/redirect_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         *  Redirect Url
         * @description URL на который происходит редирект после завершения входа на стороне провайдера
         */
        get: operations["_redirect_url_authentic_redirect_url_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/authentic/registration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         *  Register
         * @description Создает аккаунт или привязывает существующий
         */
        post: operations["_register_authentic_registration_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/coder/{user_id}/link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         *  Get Link
         * @description Получить данные внешнего аккаунт пользователя
         *
         *     Получить данные может администратор или сам пользователь
         */
        get: operations["_get_link_coder__user_id__link_get"];
        put?: never;
        /**
         *  Link
         * @description Привязать пользователю внешний аккаунт
         *
         *     Привязать аккаунт может только администратор
         */
        post: operations["_link_coder__user_id__link_post"];
        /**
         *  Unlink
         * @description Отвязать внешний аккаунт пользователю
         *
         *     Удалить данные может администратор
         */
        delete: operations["_unlink_coder__user_id__link_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/email/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**  Approve Email */
        get: operations["_approve_email_email_approve_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/email/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**  Login */
        post: operations["_login_email_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/email/registration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**  Register */
        post: operations["_register_email_registration_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/email/reset/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**  Reset Email */
        get: operations["_reset_email_email_reset_email_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/email/reset/email/request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**  Request Reset Email */
        post: operations["_request_reset_email_email_reset_email_request_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/email/reset/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**  Reset Forgotten Password */
        post: operations["_reset_forgotten_password_email_reset_password_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/email/reset/password/request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**  Request Reset Password */
        post: operations["_request_reset_password_email_reset_password_request_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/email/reset/password/restore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**  Request Reset Forgotten Password */
        post: operations["_request_reset_forgotten_password_email_reset_password_restore_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/github": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         *  Unregister
         * @description Отключает для пользователя метод входа
         */
        delete: operations["_unregister_github_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/github/auth_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         *  Auth Url
         * @description URL на который происходит редирект из приложения для авторизации на стороне провайдера
         */
        get: operations["_auth_url_github_auth_url_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/github/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         *  Login
         * @description Вход в пользователя с помощью аккаунта https://github.com
         *
         *     Производит вход, если находит пользователя по уникальному идендификатору. Если аккаунт не
         *     найден, возвращает ошибка.
         */
        post: operations["_login_github_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/github/redirect_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         *  Redirect Url
         * @description URL на который происходит редирект после завершения входа на стороне провайдера
         */
        get: operations["_redirect_url_github_redirect_url_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/github/registration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         *  Register
         * @description Создает аккаунт или привязывает существующий
         *
         *     Если передана активная сессия пользователя, то привязывает аккаунт https://github.com к
         *     аккаунту в активной сессии. Иначе, создает новый пользователь и делает https://github.com
         *     первым методом входа.
         */
        post: operations["_register_github_registration_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/google": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         *  Unregister
         * @description Отключает для пользователя метод входа
         */
        delete: operations["_unregister_google_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/google/auth_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         *  Auth Url
         * @description URL на который происходит редирект из приложения для авторизации на стороне провайдера
         */
        get: operations["_auth_url_google_auth_url_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/google/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         *  Login
         * @description Вход в пользователя с помощью аккаунта Google
         *
         *     Производит вход, если находит пользователя по Google client_id. Если аккаунт не найден,
         *     возвращает ошибка.
         */
        post: operations["_login_google_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/google/redirect_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         *  Redirect Url
         * @description URL на который происходит редирект после завершения входа на стороне провайдера
         */
        get: operations["_redirect_url_google_redirect_url_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/google/registration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         *  Register
         * @description Создает аккаунт или привязывает существующий
         *
         *     Если передана активная сессия пользователя, то привязывает аккаунт Google к аккаунту в
         *     активной сессии. иначе, создает новый пользователь и делает Google первым методом входа.
         */
        post: operations["_register_google_registration_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Groups
         * @description Scopes: `["auth.group.read"]`
         */
        get: operations["get_groups_group_get"];
        put?: never;
        /**
         * Create Group
         * @description Scopes: `["auth.group.create"]`
         */
        post: operations["create_group_group_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/group/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Group
         * @description Scopes: `["auth.group.read"]`
         */
        get: operations["get_group_group__id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Group
         * @description Scopes: `["auth.scope.delete"]`
         */
        delete: operations["delete_group_group__id__delete"];
        options?: never;
        head?: never;
        /**
         * Patch Group
         * @description Scopes: `["auth.group.update"]`
         */
        patch: operations["patch_group_group__id__patch"];
        trace?: never;
    };
    "/auth/lk-msu": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         *  Unregister
         * @description Отключает для пользователя метод входа
         */
        delete: operations["_unregister_lk_msu_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/lk-msu/auth_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         *  Auth Url
         * @description URL на который происходит редирект из приложения для авторизации на стороне провайдера
         */
        get: operations["_auth_url_lk_msu_auth_url_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/lk-msu/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         *  Login
         * @description Вход в пользователя с помощью аккаунта https://lk.msu.ru
         *
         *     Производит вход, если находит пользователя по уникальному идендификатору. Если аккаунт не
         *     найден, возвращает ошибка.
         */
        post: operations["_login_lk_msu_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/lk-msu/redirect_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         *  Redirect Url
         * @description URL на который происходит редирект после завершения входа на стороне провайдера
         */
        get: operations["_redirect_url_lk_msu_redirect_url_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/lk-msu/registration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         *  Register
         * @description Создает аккаунт или привязывает существующий
         *
         *     Если передана активная сессия пользователя, то привязывает аккаунт https://lk.msu.ru к
         *     аккаунту в активной сессии. Иначе, создает новый пользователь и делает https://lk.msu.ru
         *     первым методом входа.
         */
        post: operations["_register_lk_msu_registration_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout */
        post: operations["logout_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/mailu/{user_id}/link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         *  Get Link
         * @description Получить данные внешнего аккаунт пользователя
         *
         *     Получить данные может администратор или сам пользователь
         */
        get: operations["_get_link_mailu__user_id__link_get"];
        put?: never;
        /**
         *  Link
         * @description Привязать пользователю внешний аккаунт
         *
         *     Привязать аккаунт может только администратор
         */
        post: operations["_link_mailu__user_id__link_post"];
        /**
         *  Unlink
         * @description Отвязать внешний аккаунт пользователю
         *
         *     Удалить данные может администратор
         */
        delete: operations["_unlink_mailu__user_id__link_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Me */
        get: operations["me_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/my-msu": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         *  Unregister
         * @description Отключает для пользователя метод входа
         */
        delete: operations["_unregister_my_msu_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/my-msu/auth_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         *  Auth Url
         * @description URL на который происходит редирект из приложения для авторизации на стороне провайдера
         */
        get: operations["_auth_url_my_msu_auth_url_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/my-msu/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         *  Login
         * @description Вход в пользователя с помощью аккаунта Yandex
         *     Производит вход, если находит пользователя по уникаотному идендификатору. Если аккаунт не
         *     найден, возвращает ошибка.
         */
        post: operations["_login_my_msu_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/my-msu/redirect_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         *  Redirect Url
         * @description URL на который происходит редирект после завершения входа на стороне провайдера
         */
        get: operations["_redirect_url_my_msu_redirect_url_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/my-msu/registration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         *  Register
         * @description Создает аккаунт или привязывает существующий
         *
         *     Если передана активная сессия пользователя, то привязывает аккаунт Yandex к
         *     аккаунту в активной сессии. Иначе, создает новый пользователь и делает Yandex
         *     первым методом входа.
         */
        post: operations["_register_my_msu_registration_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/physics-msu": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         *  Unregister
         * @description Отключает для пользователя метод входа
         */
        delete: operations["_unregister_physics_msu_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/physics-msu/auth_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         *  Auth Url
         * @description URL на который происходит редирект из приложения для авторизации на стороне провайдера
         */
        get: operations["_auth_url_physics_msu_auth_url_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/physics-msu/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         *  Login
         * @description Вход в пользователя с помощью аккаунта Google
         *
         *     Производит вход, если находит пользователя по Google client_id. Если аккаунт не найден,
         *     возвращает ошибка.
         */
        post: operations["_login_physics_msu_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/physics-msu/redirect_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         *  Redirect Url
         * @description URL на который происходит редирект после завершения входа на стороне провайдера
         */
        get: operations["_redirect_url_physics_msu_redirect_url_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/physics-msu/registration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         *  Register
         * @description Создает аккаунт или привязывает существующий
         *
         *     Если передана активная сессия пользователя, то привязывает аккаунт Google к аккаунту в
         *     активной сессии. иначе, создает новый пользователь и делает Google первым методом входа.
         */
        post: operations["_register_physics_msu_registration_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/postgres/{user_id}/link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         *  Get Link
         * @description Получить данные внешнего аккаунт пользователя
         *
         *     Получить данные может администратор или сам пользователь
         */
        get: operations["_get_link_postgres__user_id__link_get"];
        put?: never;
        /**
         *  Link
         * @description Привязать пользователю внешний аккаунт
         *
         *     Привязать аккаунт может только администратор
         */
        post: operations["_link_postgres__user_id__link_post"];
        /**
         *  Unlink
         * @description Отвязать внешний аккаунт пользователю
         *
         *     Удалить данные может администратор
         */
        delete: operations["_unlink_postgres__user_id__link_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/scope": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Scopes
         * @description Scopes: `["auth.scope.read"]`
         */
        get: operations["get_scopes_scope_get"];
        put?: never;
        /**
         * Create Scope
         * @description Scopes: `["auth.scope.create"]`
         */
        post: operations["create_scope_scope_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/scope/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Scope
         * @description Scopes: `["auth.scope.read"]`
         */
        get: operations["get_scope_scope__id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Scope
         * @description Scopes: `["auth.scope.delete"]`
         */
        delete: operations["delete_scope_scope__id__delete"];
        options?: never;
        head?: never;
        /**
         * Update Scope
         * @description Scopes: `["auth.scope.update"]`
         */
        patch: operations["update_scope_scope__id__patch"];
        trace?: never;
    };
    "/auth/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Sessions */
        get: operations["get_sessions_session_get"];
        put?: never;
        /** Create Session */
        post: operations["create_session_session_post"];
        /** Delete Sessions */
        delete: operations["delete_sessions_session_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/session/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update Session */
        patch: operations["update_session_session__id__patch"];
        trace?: never;
    };
    "/auth/session/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Session */
        delete: operations["delete_session_session__token__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/telegram": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         *  Unregister
         * @description Отключает для пользователя метод входа
         */
        delete: operations["_unregister_telegram_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/telegram/auth_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         *  Auth Url
         * @description URL на который происходит редирект из приложения для авторизации на стороне провайдера
         */
        get: operations["_auth_url_telegram_auth_url_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/telegram/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         *  Login
         * @description Вход в пользователя с помощью аккаунта https://lk.msu.ru
         *
         *     Производит вход, если находит пользователя по уникаотному идендификатору. Если аккаунт не
         *     найден, возвращает ошибка.
         */
        post: operations["_login_telegram_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/telegram/redirect_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         *  Redirect Url
         * @description URL на который происходит редирект после завершения входа на стороне провайдера
         */
        get: operations["_redirect_url_telegram_redirect_url_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/telegram/registration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**  Register */
        post: operations["_register_telegram_registration_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Users
         * @description Scopes: `["auth.user.read"]`
         */
        get: operations["get_users_user_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/user/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User
         * @description Scopes: `["auth.user.read"]`
         */
        get: operations["get_user_user__user_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete User
         * @description Scopes: `["auth.user.delete"]` or `["auth.user.selfdelete"]` for self delete
         */
        delete: operations["delete_user_user__user_id__delete"];
        options?: never;
        head?: never;
        /**
         * Patch User
         * @description Scopes: `["auth.user.update"]`
         */
        patch: operations["patch_user_user__user_id__patch"];
        trace?: never;
    };
    "/auth/vk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         *  Unregister
         * @description Отключает для пользователя метод входа
         */
        delete: operations["_unregister_vk_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/vk/auth_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         *  Auth Url
         * @description URL на который происходит редирект из приложения для авторизации на стороне провайдера
         */
        get: operations["_auth_url_vk_auth_url_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/vk/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         *  Login
         * @description Вход в пользователя с помощью аккаунта https://lk.msu.ru
         *
         *     Производит вход, если находит пользователя по уникаотному идендификатору. Если аккаунт не
         *     найден, возвращает ошибка.
         */
        post: operations["_login_vk_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/vk/redirect_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         *  Redirect Url
         * @description URL на который происходит редирект после завершения входа на стороне провайдера
         */
        get: operations["_redirect_url_vk_redirect_url_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/vk/registration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         *  Register
         * @description Создает аккаунт или привязывает существующий
         *
         *     Если передана активная сессия пользователя, то привязывает аккаунт https://vk.com к
         *     аккаунту в активной сессии. Иначе, создает новый пользователь и делает https://vk.com
         *     первым методом входа.
         */
        post: operations["_register_vk_registration_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/yandex": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         *  Unregister
         * @description Отключает для пользователя метод входа
         */
        delete: operations["_unregister_yandex_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/yandex/auth_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         *  Auth Url
         * @description URL на который происходит редирект из приложения для авторизации на стороне провайдера
         */
        get: operations["_auth_url_yandex_auth_url_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/yandex/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         *  Login
         * @description Вход в пользователя с помощью аккаунта Yandex
         *     Производит вход, если находит пользователя по уникаотному идендификатору. Если аккаунт не
         *     найден, возвращает ошибка.
         */
        post: operations["_login_yandex_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/yandex/redirect_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         *  Redirect Url
         * @description URL на который происходит редирект после завершения входа на стороне провайдера
         */
        get: operations["_redirect_url_yandex_redirect_url_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/yandex/registration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         *  Register
         * @description Создает аккаунт или привязывает существующий
         *
         *     Если передана активная сессия пользователя, то привязывает аккаунт Yandex к
         *     аккаунту в активной сессии. Иначе, создает новый пользователь и делает Yandex
         *     первым методом входа.
         */
        post: operations["_register_yandex_registration_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Session */
        auth_backend__auth_method__session__Session: {
            /**
             * Expires
             * Format: date-time
             */
            expires: string;
            /** Id */
            id: number;
            /** Session Scopes */
            session_scopes: string[];
            /** Token */
            token: string;
            /** User Id */
            user_id: number;
        };
        /** OauthResponseSchema */
        auth_backend__auth_plugins__authentic__AuthenticAuth__OauthResponseSchema: {
            /** Code */
            code?: string | null;
            /** Id Token */
            id_token?: string | null;
            /** Scopes */
            scopes?: string[] | null;
            /** Session Name */
            session_name?: string | null;
        };
        /** OauthResponseSchema */
        auth_backend__auth_plugins__github__GithubAuth__OauthResponseSchema: {
            /** Code */
            code?: string | null;
            /** Id Token */
            id_token?: string | null;
            /** Scopes */
            scopes?: string[] | null;
            /** Session Name */
            session_name?: string | null;
        };
        /** OauthResponseSchema */
        auth_backend__auth_plugins__google__GoogleAuth__OauthResponseSchema: {
            /** Code */
            code?: string | null;
            /** Id Token */
            id_token?: string | null;
            /** Scopes */
            scopes?: string[] | null;
            /** Session Name */
            session_name?: string | null;
            /** State */
            state?: string | null;
        };
        /** OauthResponseSchema */
        auth_backend__auth_plugins__lkmsu__LkmsuAuth__OauthResponseSchema: {
            /** Code */
            code?: string | null;
            /** Id Token */
            id_token?: string | null;
            /** Scopes */
            scopes?: string[] | null;
            /** Session Name */
            session_name?: string | null;
        };
        /** OauthResponseSchema */
        auth_backend__auth_plugins__telegram__TelegramAuth__OauthResponseSchema: {
            /** Auth Date */
            auth_date?: string | null;
            /** First Name */
            first_name?: string | null;
            /** Hash */
            hash?: string | null;
            /** Id */
            id?: string | null;
            /** Id Token */
            id_token?: string | null;
            /** Last Name */
            last_name?: string | null;
            /** Photo Url */
            photo_url?: string | null;
            /** Scopes */
            scopes?: string[] | null;
            /** Session Name */
            session_name?: string | null;
            /** Username */
            username?: string | null;
        };
        /** OauthResponseSchema */
        auth_backend__auth_plugins__vk__VkAuth__OauthResponseSchema: {
            /** Code */
            code?: string | null;
            /** Id Token */
            id_token?: string | null;
            /** Scopes */
            scopes?: string[] | null;
            /** Session Name */
            session_name?: string | null;
        };
        /** OauthResponseSchema */
        auth_backend__auth_plugins__yandex__YandexAuth__OauthResponseSchema: {
            /** Code */
            code?: string | null;
            /** Id Token */
            id_token?: string | null;
            /** Scopes */
            scopes?: string[] | null;
            /** Session Name */
            session_name?: string | null;
        };
        /** Session */
        auth_backend__schemas__models__Session: {
            /** Expires */
            expires?: string | null;
            /** Id */
            id: number;
            /** Is Unbounded */
            is_unbounded?: boolean | null;
            /**
             * Last Activity
             * Format: date-time
             */
            last_activity: string;
            /** Session Name */
            session_name?: string | null;
            /** Session Scopes */
            session_scopes?: string[] | null;
            /** Token */
            token?: string | null;
            /** User Id */
            user_id: number;
        };
        /** EmailChange */
        EmailChange: {
            /** Email */
            email: string;
        };
        /** EmailLogin */
        EmailLogin: {
            /** Email */
            email: string;
            /** Password */
            password: string;
            /** Scopes */
            scopes?: string[] | null;
            /** Session Name */
            session_name?: string | null;
        };
        /** EmailRegister */
        EmailRegister: {
            /** Email */
            email: string;
            /** Password */
            password: string;
        };
        /** GetOuterAccount */
        GetOuterAccount: {
            /** Username */
            username: string;
        };
        /** Group */
        Group: {
            /** Id */
            id: number;
            /** Name */
            name: string;
            /** Parent Id */
            parent_id?: number | null;
        };
        /** GroupGet */
        GroupGet: {
            /** Child */
            child?: components["schemas"]["Group"][] | null;
            /** Id */
            id: number;
            /** Indirect Scopes */
            indirect_scopes?: components["schemas"]["PinchedScope"][] | null;
            /** Name */
            name: string;
            /** Parent Id */
            parent_id?: number | null;
            /** Scopes */
            scopes?: components["schemas"]["PinchedScope"][] | null;
            /** Users */
            users?: number[] | null;
        };
        /** GroupPatch */
        GroupPatch: {
            /** Name */
            name?: string | null;
            /** Parent Id */
            parent_id?: number | null;
            /** Scopes */
            scopes?: number[] | null;
        };
        /** GroupPost */
        GroupPost: {
            /** Name */
            name: string;
            /** Parent Id */
            parent_id?: number | null;
            /** Scopes */
            scopes: number[];
        };
        /** GroupsGet */
        GroupsGet: {
            /** Items */
            items: components["schemas"]["GroupGet"][];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** LinkOuterAccount */
        LinkOuterAccount: {
            /** Username */
            username: string;
        };
        /** PinchedScope */
        PinchedScope: {
            /** Id */
            id: number;
            /**
             * Name
             * Format: scope
             */
            name: string;
        };
        /** RequestResetForgottenPassword */
        RequestResetForgottenPassword: {
            /** Email */
            email: string;
        };
        /** ResetForgottenPassword */
        ResetForgottenPassword: {
            /** New Password */
            new_password: string;
        };
        /** ResetPassword */
        ResetPassword: {
            /** New Password */
            new_password: string;
            /** Password */
            password: string;
        };
        /** ScopeGet */
        ScopeGet: {
            /** Comment */
            comment?: string | null;
            /** Id */
            id: number;
            /**
             * Name
             * Format: scope
             */
            name: string;
        };
        /** ScopePatch */
        ScopePatch: {
            /** Comment */
            comment?: string | null;
            /** Name */
            name?: string | null;
        };
        /** ScopePost */
        ScopePost: {
            /** Comment */
            comment?: string | null;
            /**
             * Name
             * Format: scope
             */
            name: string;
        };
        /** SessionPatch */
        SessionPatch: {
            /** Scopes */
            scopes?: string[] | null;
            /** Session Name */
            session_name?: string | null;
        };
        /** SessionPost */
        SessionPost: {
            /** Expires */
            expires?: string | null;
            /** Is Unbounded */
            is_unbounded?: boolean | null;
            /**
             * Scopes
             * @default []
             */
            scopes: string[];
            /** Session Name */
            session_name?: string | null;
        };
        /** StatusResponseModel */
        StatusResponseModel: {
            /** Message */
            message: string;
            /** Ru */
            ru: string;
            /** Status */
            status: string;
        };
        /** UrlSchema */
        UrlSchema: {
            /** Url */
            url: string;
        };
        /** User */
        User: {
            /** Id */
            id: number;
        };
        /** UserGet */
        UserGet: {
            /** Auth Methods */
            auth_methods?: string[] | null;
            /** Email */
            email?: string | null;
            /** Groups */
            groups?: number[] | null;
            /** Id */
            id: number;
            /** Indirect Groups */
            indirect_groups?: number[] | null;
            /** Session Scopes */
            session_scopes?: components["schemas"]["PinchedScope"][] | null;
            /** User Scopes */
            user_scopes?: components["schemas"]["PinchedScope"][] | null;
        };
        /** UserPatch */
        UserPatch: {
            /** Groups */
            groups: number[];
        };
        /** UsersGet */
        UsersGet: {
            /** Items */
            items: components["schemas"]["UserGet"][];
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    _get_link_airflow__user_id__link_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOuterAccount"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _link_airflow__user_id__link_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LinkOuterAccount"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOuterAccount"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _unlink_airflow__user_id__link_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _unregister_authentic_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    _auth_url_authentic_auth_url_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UrlSchema"];
                };
            };
        };
    };
    _login_authentic_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["auth_backend__auth_plugins__authentic__AuthenticAuth__OauthResponseSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth_backend__auth_method__session__Session"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _redirect_url_authentic_redirect_url_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UrlSchema"];
                };
            };
        };
    };
    _register_authentic_registration_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["auth_backend__auth_plugins__authentic__AuthenticAuth__OauthResponseSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth_backend__auth_method__session__Session"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _get_link_coder__user_id__link_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOuterAccount"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _link_coder__user_id__link_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LinkOuterAccount"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOuterAccount"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _unlink_coder__user_id__link_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _approve_email_email_approve_get: {
        parameters: {
            query: {
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _login_email_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailLogin"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth_backend__auth_method__session__Session"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _register_email_registration_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailRegister"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _reset_email_email_reset_email_get: {
        parameters: {
            query: {
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _request_reset_email_email_reset_email_request_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailChange"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _reset_forgotten_password_email_reset_password_post: {
        parameters: {
            query?: never;
            header: {
                "reset-token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetForgottenPassword"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _request_reset_password_email_reset_password_request_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetPassword"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _request_reset_forgotten_password_email_reset_password_restore_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RequestResetForgottenPassword"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _unregister_github_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    _auth_url_github_auth_url_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UrlSchema"];
                };
            };
        };
    };
    _login_github_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["auth_backend__auth_plugins__github__GithubAuth__OauthResponseSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth_backend__auth_method__session__Session"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _redirect_url_github_redirect_url_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UrlSchema"];
                };
            };
        };
    };
    _register_github_registration_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["auth_backend__auth_plugins__github__GithubAuth__OauthResponseSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth_backend__auth_method__session__Session"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _unregister_google_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    _auth_url_google_auth_url_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UrlSchema"];
                };
            };
        };
    };
    _login_google_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["auth_backend__auth_plugins__google__GoogleAuth__OauthResponseSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth_backend__auth_method__session__Session"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _redirect_url_google_redirect_url_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UrlSchema"];
                };
            };
        };
    };
    _register_google_registration_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["auth_backend__auth_plugins__google__GoogleAuth__OauthResponseSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth_backend__auth_method__session__Session"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_groups_group_get: {
        parameters: {
            query?: {
                info?: ("" | "scopes" | "indirect_scopes" | "child" | "users")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupsGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_group_group_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupPost"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_group_group__id__get: {
        parameters: {
            query?: {
                info?: ("child" | "scopes" | "indirect_scopes" | "users")[];
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_group_group__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patch_group_group__id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupPatch"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _unregister_lk_msu_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    _auth_url_lk_msu_auth_url_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UrlSchema"];
                };
            };
        };
    };
    _login_lk_msu_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["auth_backend__auth_plugins__lkmsu__LkmsuAuth__OauthResponseSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth_backend__auth_method__session__Session"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _redirect_url_lk_msu_redirect_url_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UrlSchema"];
                };
            };
        };
    };
    _register_lk_msu_registration_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["auth_backend__auth_plugins__lkmsu__LkmsuAuth__OauthResponseSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth_backend__auth_method__session__Session"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    logout_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
        };
    };
    _get_link_mailu__user_id__link_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOuterAccount"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _link_mailu__user_id__link_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LinkOuterAccount"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOuterAccount"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _unlink_mailu__user_id__link_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    me_me_get: {
        parameters: {
            query?: {
                info?: ("groups" | "indirect_groups" | "session_scopes" | "user_scopes" | "auth_methods")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _unregister_my_msu_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    _auth_url_my_msu_auth_url_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UrlSchema"];
                };
            };
        };
    };
    _login_my_msu_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["auth_backend__auth_plugins__yandex__YandexAuth__OauthResponseSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth_backend__auth_method__session__Session"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _redirect_url_my_msu_redirect_url_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UrlSchema"];
                };
            };
        };
    };
    _register_my_msu_registration_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["auth_backend__auth_plugins__yandex__YandexAuth__OauthResponseSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth_backend__auth_method__session__Session"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _unregister_physics_msu_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    _auth_url_physics_msu_auth_url_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UrlSchema"];
                };
            };
        };
    };
    _login_physics_msu_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["auth_backend__auth_plugins__google__GoogleAuth__OauthResponseSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth_backend__auth_method__session__Session"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _redirect_url_physics_msu_redirect_url_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UrlSchema"];
                };
            };
        };
    };
    _register_physics_msu_registration_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["auth_backend__auth_plugins__google__GoogleAuth__OauthResponseSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth_backend__auth_method__session__Session"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _get_link_postgres__user_id__link_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOuterAccount"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _link_postgres__user_id__link_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LinkOuterAccount"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOuterAccount"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _unlink_postgres__user_id__link_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_scopes_scope_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScopeGet"][];
                };
            };
        };
    };
    create_scope_scope_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScopePost"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScopeGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_scope_scope__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScopeGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_scope_scope__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_scope_scope__id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScopePatch"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScopeGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_sessions_session_get: {
        parameters: {
            query?: {
                info?: ("session_scopes" | "token" | "expires")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth_backend__schemas__models__Session"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_session_session_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SessionPost"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth_backend__schemas__models__Session"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_sessions_session_delete: {
        parameters: {
            query?: {
                delete_current?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_session_session__id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SessionPatch"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth_backend__schemas__models__Session"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_session_session__token__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _unregister_telegram_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    _auth_url_telegram_auth_url_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UrlSchema"];
                };
            };
        };
    };
    _login_telegram_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["auth_backend__auth_plugins__telegram__TelegramAuth__OauthResponseSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth_backend__auth_method__session__Session"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _redirect_url_telegram_redirect_url_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UrlSchema"];
                };
            };
        };
    };
    _register_telegram_registration_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["auth_backend__auth_plugins__telegram__TelegramAuth__OauthResponseSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth_backend__auth_method__session__Session"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_users_user_get: {
        parameters: {
            query?: {
                info?: ("groups" | "indirect_groups" | "scopes" | "")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_user__user_id__get: {
        parameters: {
            query?: {
                info?: ("groups" | "indirect_groups" | "scopes" | "auth_methods")[];
            };
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_user_user__user_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patch_user_user__user_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserPatch"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _unregister_vk_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    _auth_url_vk_auth_url_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UrlSchema"];
                };
            };
        };
    };
    _login_vk_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["auth_backend__auth_plugins__vk__VkAuth__OauthResponseSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth_backend__auth_method__session__Session"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _redirect_url_vk_redirect_url_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UrlSchema"];
                };
            };
        };
    };
    _register_vk_registration_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["auth_backend__auth_plugins__vk__VkAuth__OauthResponseSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth_backend__auth_method__session__Session"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _unregister_yandex_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    _auth_url_yandex_auth_url_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UrlSchema"];
                };
            };
        };
    };
    _login_yandex_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["auth_backend__auth_plugins__yandex__YandexAuth__OauthResponseSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth_backend__auth_method__session__Session"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _redirect_url_yandex_redirect_url_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UrlSchema"];
                };
            };
        };
    };
    _register_yandex_registration_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["auth_backend__auth_plugins__yandex__YandexAuth__OauthResponseSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth_backend__auth_method__session__Session"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
