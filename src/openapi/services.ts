/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/services/category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Categories
         * @description Показывает список категорий
         *
         *     Необходимые scopes: `-`
         */
        get: operations["get_categories_category_get"];
        put?: never;
        /**
         * Create Category
         * @description Создает категорию
         *
         *     Необходимые scopes: `services.category.create`
         */
        post: operations["create_category_category_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/services/category/{category_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Category
         * @description Показывает категорию
         *
         *     Необходимые scopes: `-`
         */
        get: operations["get_category_category__category_id__get"];
        put?: never;
        post?: never;
        /**
         * Remove Category
         * @description Удаляет категорию и все кнопки в ней
         *
         *     Необходимые scopes: `services.category.delete`
         */
        delete: operations["remove_category_category__category_id__delete"];
        options?: never;
        head?: never;
        /**
         * Update Category
         * @description Обновляет категорию
         *
         *     Необходимые scopes: `services.category.update`
         */
        patch: operations["update_category_category__category_id__patch"];
        trace?: never;
    };
    "/services/category/{category_id}/button": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Buttons
         * @description Показать все кнопки в категории
         *
         *     Необходимые scopes: `-`
         */
        get: operations["get_buttons_category__category_id__button_get"];
        put?: never;
        /**
         * Create Button
         * @description Создать кнопку
         *
         *     Необходимые scopes: `services.button.create`
         */
        post: operations["create_button_category__category_id__button_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/services/category/{category_id}/button/{button_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Button
         * @description Показать одну кнопку
         *
         *     Необходимые scopes: `-`
         */
        get: operations["get_button_category__category_id__button__button_id__get"];
        put?: never;
        post?: never;
        /**
         * Remove Button
         * @description Удалить кнопку
         *
         *     Необходимые scopes: `services.button.remove`
         */
        delete: operations["remove_button_category__category_id__button__button_id__delete"];
        options?: never;
        head?: never;
        /**
         * Update Button
         * @description Обновить кнопку
         *
         *     Необходимые scopes: `services.button.update`
         */
        patch: operations["update_button_category__category_id__button__button_id__patch"];
        trace?: never;
    };
    "/services/service/{button_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Service
         * @description Показать одну кнопку
         *
         *     Необходимые scopes: `-`
         *
         *     TODO: Переделать ручку, сделав сервис независимым от кнопки
         */
        get: operations["get_service_service__button_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** ButtonCreate */
        ButtonCreate: {
            /**
             * Icon
             * @description Иконка кнопки
             */
            icon: string;
            /**
             * Link
             * @description Ссылка, на которую перенаправляет кнопка
             */
            link: string;
            /**
             * Name
             * @description Название кнопки
             */
            name: string;
            /**
             * Optional Scopes
             * @description Каким скоупы желательны
             */
            optional_scopes?: string[] | null;
            /**
             * Required Scopes
             * @description Каким скоупы нужны, чтобы кнопка была доступна
             */
            required_scopes?: string[] | null;
            /** @description Тип открываемой ссылки (Ссылка приложения/Браузер в приложении/Браузер */
            type: components["schemas"]["Type"];
        };
        /** ButtonGet */
        ButtonGet: {
            /**
             * Icon
             * @description Иконка кнопки
             */
            icon: string | null;
            /**
             * Id
             * @description Айди кнопки
             */
            id: number;
            /**
             * Link
             * @description Ссылка, на которую перенаправляет кнопка
             */
            link: string | null;
            /**
             * Name
             * @description Название кнопки
             */
            name: string | null;
            /** Optional Scopes */
            optional_scopes?: string[] | null;
            /**
             * Order
             * @description Порядок, в котором отображаются кнопки
             */
            order: number | null;
            /** Required Scopes */
            required_scopes?: string[] | null;
            /**
             * Scopes
             * @description Скоупы, которые можно запросить
             */
            scopes?: string[] | null;
            /** @description Тип открываемой ссылки (Ссылка приложения/Браузер в приложении/Браузер */
            type: components["schemas"]["Type"] | null;
            /** @description Доступна ли запрашиваемая кнопка */
            view?: components["schemas"]["ButtonView"] | null;
        };
        /** ButtonsGet */
        ButtonsGet: {
            /** Buttons */
            buttons?: components["schemas"]["ButtonGet"][] | null;
        };
        /** ButtonUpdate */
        ButtonUpdate: {
            /**
             * Category Id
             * @description Айди категории
             */
            category_id?: number | null;
            /**
             * Icon
             * @description Иконка кнопки
             */
            icon?: string | null;
            /**
             * Link
             * @description Ссылка, на которую перенаправляет кнопка
             */
            link?: string | null;
            /**
             * Name
             * @description Название кнопки
             */
            name?: string | null;
            /**
             * Optional Scopes
             * @description Каким скоупы желательны
             */
            optional_scopes?: string[] | null;
            /**
             * Order
             * @description Порядок, в котором отображаются кнопки
             */
            order?: number | null;
            /**
             * Required Scopes
             * @description Каким скоупы нужны, чтобы кнопка была доступна
             */
            required_scopes?: string[] | null;
            /** @description Тип открываемой ссылки (Ссылка приложения/Браузер в приложении/Браузер */
            type?: components["schemas"]["Type"] | null;
        };
        /**
         * ButtonView
         * @enum {string}
         */
        ButtonView: "active" | "blocked";
        /** CategoryCreate */
        CategoryCreate: {
            /**
             * Name
             * @description Имя категории
             */
            name: string;
            /**
             * Scopes
             * @description Каким пользователям будет видна категория
             */
            scopes?: string[] | null;
            /**
             * Type
             * @description Тип отображения категории
             */
            type: string;
        };
        /** CategoryGet */
        CategoryGet: {
            /** Buttons */
            buttons?: components["schemas"]["ButtonGet"][] | null;
            /** Id */
            id: number;
            /** Name */
            name?: string | null;
            /** Order */
            order: number;
            /** Scopes */
            scopes?: string[] | null;
            /** Type */
            type?: string | null;
        };
        /** CategoryUpdate */
        CategoryUpdate: {
            /**
             * Name
             * @description Имя категории
             */
            name?: string | null;
            /**
             * Order
             * @description На какую позицию перенести категорию
             */
            order?: number | null;
            /**
             * Scopes
             * @description Каким пользователям будет видна категория
             */
            scopes?: string[] | null;
            /**
             * Type
             * @description Тип отображения категории
             */
            type?: string | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * Type
         * @enum {string}
         */
        Type: "inapp" | "internal" | "external";
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_categories_category_get: {
        parameters: {
            query?: {
                info?: "buttons"[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryGet"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_category_category_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CategoryCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_category_category__category_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                category_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_category_category__category_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                category_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_category_category__category_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                category_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CategoryUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryUpdate"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_buttons_category__category_id__button_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                category_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ButtonsGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_button_category__category_id__button_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                category_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ButtonCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ButtonGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_button_category__category_id__button__button_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                button_id: number;
                category_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ButtonGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_button_category__category_id__button__button_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                button_id: number;
                category_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_button_category__category_id__button__button_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                button_id: number;
                category_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ButtonUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ButtonUpdate"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_service_service__button_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                button_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ButtonGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
