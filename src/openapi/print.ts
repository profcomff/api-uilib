/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/admin/reboot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reboot Terminal */
        post: operations["reboot_terminal_admin_reboot_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Manual Update Terminal */
        post: operations["manual_update_terminal_admin_update_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send
         * @description Получить пин код для загрузки и скачивания файла.
         *
         *     Полученный пин-код можно использовать в методах POST и GET `/file/{pin}`.
         */
        post: operations["send_file_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/file/${string}`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Print File
         * @description Получить файл для печати.
         *
         *     Требует пин-код, полученный в методе POST `/file`. Файл можно скачать
         *     бесконечное количество раз в течение 7 дней после загрузки (меняется в
         *     настройках сервера).
         */
        get: operations["print_file_file__pin__get"];
        put?: never;
        /**
         * Upload File
         * @description Загрузить файл на сервер.
         *
         *     Требует пин-код, полученный в методе POST `/file`. Файл для пин-кода можно
         *     загрузить лишь один раз. Файл должен быть размером до 5 000 000 байт
         *     (меняется в настройках сервера).
         */
        post: operations["upload_file_file__pin__post"];
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update File Options
         * @description Обновляет настройки печати.
         *
         *     Требует пин-код, полученный в методе POST `/file`. Обновлять настройки
         *     можно бесконечное количество раз. Можно изменять настройки по одной.
         */
        patch: operations["update_file_options_file__pin__patch"];
        trace?: never;
    };
    "/is_union_member": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check Union Member
         * @description Проверяет наличие пользователя в списке.
         */
        get: operations["check_union_member_is_union_member_get"];
        put?: never;
        /**
         * Update List
         * @description Обновляет данные существующего пользователя или добавляет нового, если его нет.
         */
        post: operations["update_list_is_union_member_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/qr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Instant Print */
        post: operations["instant_print_qr_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Body_upload_file_file__pin__post */
        Body_upload_file_file__pin__post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** InstantPrintCreate */
        InstantPrintCreate: {
            /** Files */
            files: string[];
            /** Qr Token */
            qr_token: string;
        };
        /** PrintOptions */
        PrintOptions: {
            /**
             * Copies
             * @description Количество копий для печати
             * @default 1
             */
            copies: number;
            /**
             * Pages
             * @description Страницы для печати
             * @default
             * @example 2-4,6
             */
            pages: string;
            /**
             * Two Sided
             * @description Включить печать с двух сторон листа
             * @default false
             */
            two_sided: boolean;
        };
        /** RebootInput */
        RebootInput: {
            /** Terminal Token */
            terminal_token: string;
        };
        /** ReceiveOutput */
        ReceiveOutput: {
            /**
             * Filename
             * @description Название файла, который можно запросить по адресу https://app.profcomff.com/print/static/{filename}
             * @example 2021-11-02-ZMNF5V...9.pdf
             */
            filename: string;
            options: components["schemas"]["PrintOptions"];
        };
        /** SendInput */
        SendInput: {
            /**
             * Filename
             * @description Название файла
             * @example filename.pdf
             */
            filename: string;
            /**
             * Number
             * @description Номер профсоюзного или студенческого билетов
             * @example 1015000
             */
            number: string;
            /** @default {
             *       "pages": "",
             *       "copies": 1,
             *       "two_sided": false
             *     } */
            options: components["schemas"]["PrintOptions"];
            /** Source */
            source?: string | null;
            /**
             * Surname
             * @description Фамилия
             * @example Иванов
             */
            surname: string;
        };
        /** SendInputUpdate */
        SendInputUpdate: {
            options?: components["schemas"]["PrintOptions"] | null;
        };
        /** SendOutput */
        SendOutput: {
            options: components["schemas"]["PrintOptions"];
            /**
             * Pin
             * @description Пин-код, который используется для манипуляции файлами
             * @example OF72I1
             */
            pin: string;
        };
        /** StatusResponseModel */
        StatusResponseModel: {
            /** Message */
            message: string;
            /** Ru */
            ru: string;
            /** Status */
            status: string;
        };
        /** UpdateInput */
        UpdateInput: {
            /** Terminal Token */
            terminal_token: string;
        };
        /** UpdateUserList */
        UpdateUserList: {
            /** Users */
            users: components["schemas"]["UserCreate"][];
        };
        /** UserCreate */
        UserCreate: {
            /** Student Number */
            student_number: string | null;
            /** Union Number */
            union_number: string | null;
            /** Username */
            username: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    reboot_terminal_admin_reboot_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RebootInput"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    manual_update_terminal_admin_update_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateInput"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    send_file_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendInput"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SendOutput"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
        };
    };
    print_file_file__pin__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pin: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceiveOutput"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Requested Range Not Satisfiable */
            416: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_file_file__pin__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pin: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_file_file__pin__post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SendOutput"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Request Entity Too Large */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Requested Range Not Satisfiable */
            416: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_file_options_file__pin__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pin: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendInputUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SendOutput"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Request Entity Too Large */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Requested Range Not Satisfiable */
            416: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    check_union_member_is_union_member_get: {
        parameters: {
            query: {
                number: string;
                surname: string;
                v?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_list_is_union_member_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserList"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    instant_print_qr_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InstantPrintCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
