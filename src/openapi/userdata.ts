/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Categories
         * @description Получить все категории
         */
        get: operations["get_categories_category_get"];
        put?: never;
        /**
         * Create Category
         * @description Создать категорию пользовательских данных. Получить категорию можно будет со скоупами, имена которых в category_inp.scopes
         *     Ручка обновит документацию
         */
        post: operations["create_category_category_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/category/${integer}/param`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Params
         * @description Получить все параметры категории
         */
        get: operations["get_params_category__category_id__param_get"];
        put?: never;
        /**
         * Create Param
         * @description Создать поле внутри категории. Ответ на пользовательские данные будет такой {..., category: {...,param: '', ...}}
         */
        post: operations["create_param_category__category_id__param_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/category/${integer}/param/${integer}`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Param
         * @description Получить параметр по айди
         */
        get: operations["get_param_category__category_id__param__id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Param
         * @description Удалить параметр внутри категории
         */
        delete: operations["delete_param_category__category_id__param__id__delete"];
        options?: never;
        head?: never;
        /**
         * Patch Param
         * @description Обновить параметр внутри категории
         */
        patch: operations["patch_param_category__category_id__param__id__patch"];
        trace?: never;
    };
    [path: `/category/${integer}`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Category
         * @description Получить категорию
         */
        get: operations["get_category_category__id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Category
         * @description Удалить категорию
         */
        delete: operations["delete_category_category__id__delete"];
        options?: never;
        head?: never;
        /**
         * Patch Category
         * @description Обновить категорию
         */
        patch: operations["patch_category_category__id__patch"];
        trace?: never;
    };
    "/source": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Sources
         * @description Получить все источники данных
         */
        get: operations["get_sources_source_get"];
        put?: never;
        /**
         * Create Source
         * @description Создать источник данных
         */
        post: operations["create_source_source_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/source/${integer}`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Source
         * @description Получить источник данных
         */
        get: operations["get_source_source__id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Source
         * @description Удалить источник данных
         */
        delete: operations["delete_source_source__id__delete"];
        options?: never;
        head?: never;
        /**
         * Patch Source
         * @description Обновить источник данных
         */
        patch: operations["patch_source_source__id__patch"];
        trace?: never;
    };
    [path: `/user/${integer}`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Info
         * @description Получить информацию о пользователе
         */
        get: operations["get_user_info_user__id__get"];
        put?: never;
        /**
         * Update User
         * @description Обновить информацию о пользователе.
         *     Объект - пользователь, информацию которого обновляют
         *     Субъект - пользователь, который обновляет - источник
         *
         *     Если не указать параметр внутри категории, то ничего не обновится, если указать что-то,
         *     то либо создастся новая запись(в случае, если она отсутствовала у данного источника), либо отредактируется
         *     старая. Если в значении параметра указан None, то соответствующая информациия удаляется из данного источника
         *
         *     Обновлять через эту ручку можно только от имени источников admin и user.
         *
         *     Чтобы обновить от имени админиа, надо иметь скоуп `userdata.info.admin`
         *     Чтобы обновить неизменяемую информацию надо обладать скоупом `userdata.info.update`
         *     Для обновления своей информации(источник `user`) не нужны скоупы на обновление соответствующих категорий
         *     Для обновления чужой информации от имени админа(источник  `admin`)
         *     нужны скоупы на обновление всех указанных в теле запроса категорий пользовательских данных данных
         */
        post: operations["update_user_user__id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** CategoryGet */
        CategoryGet: {
            /** Id */
            id: number;
            /** Name */
            name: string;
            /** Params */
            params?: components["schemas"]["ParamGet"][] | null;
            /** Read Scope */
            read_scope?: string | null;
            /** Update Scope */
            update_scope?: string | null;
        };
        /** CategoryPatch */
        CategoryPatch: {
            /** Name */
            name?: string | null;
            /** Read Scope */
            read_scope?: string | null;
            /** Update Scope */
            update_scope?: string | null;
        };
        /** CategoryPost */
        CategoryPost: {
            /** Name */
            name: string;
            /** Read Scope */
            read_scope?: string | null;
            /** Update Scope */
            update_scope?: string | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** ParamGet */
        ParamGet: {
            /** Category Id */
            category_id: number;
            /** Changeable */
            changeable: boolean;
            /** Id */
            id: number;
            /** Is Required */
            is_required: boolean;
            /** Name */
            name: string;
            type: components["schemas"]["ViewType"];
        };
        /** ParamPatch */
        ParamPatch: {
            /** Changeable */
            changeable?: boolean | null;
            /** Is Required */
            is_required?: boolean | null;
            /** Name */
            name?: string | null;
            type?: components["schemas"]["ViewType"] | null;
        };
        /** ParamPost */
        ParamPost: {
            /** Changeable */
            changeable: boolean;
            /** Is Required */
            is_required: boolean;
            /** Name */
            name: string;
            type: components["schemas"]["ViewType"];
        };
        /** SourceGet */
        SourceGet: {
            /** Id */
            id: number;
            /** Name */
            name: string;
            /** Trust Level */
            trust_level: number;
        };
        /** SourcePatch */
        SourcePatch: {
            /** Name */
            name?: string | null;
            /** Trust Level */
            trust_level?: number | null;
        };
        /** SourcePost */
        SourcePost: {
            /** Name */
            name: string;
            /** Trust Level */
            trust_level: number;
        };
        /** StatusResponseModel */
        StatusResponseModel: {
            /** Message */
            message: string;
            /** Ru */
            ru: string;
            /** Status */
            status: string;
        };
        /** UserInfo */
        UserInfo: {
            /** Category */
            category: string;
            /** Param */
            param: string;
            /** Value */
            value?: string | null;
        };
        /** UserInfoGet */
        UserInfoGet: {
            /** Items */
            items: components["schemas"]["UserInfo"][];
        };
        /** UserInfoUpdate */
        UserInfoUpdate: {
            /** Items */
            items: components["schemas"]["UserInfo"][];
            /** Source */
            source: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * ViewType
         * @description Тип отображения пользоватльских данных в ответе `GET /user/{user_id}`
         *     ALL: {category: {param: [val1, val2, ...]}}
         *     LAST: {category: {param: last_modified_value}}
         *     MOST_TRUSTED: {category: {param: most_trusted_value}}
         * @enum {string}
         */
        ViewType: "all" | "last" | "most_trusted";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_categories_category_get: {
        parameters: {
            query?: {
                query?: "param"[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryGet"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_category_category_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CategoryPost"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_params_category__category_id__param_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                category_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ParamGet"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_param_category__category_id__param_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                category_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ParamPost"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ParamGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_param_category__category_id__param__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                category_id: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ParamGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_param_category__category_id__param__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                category_id: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patch_param_category__category_id__param__id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                category_id: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ParamPatch"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ParamGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_category_category__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_category_category__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patch_category_category__id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CategoryPatch"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_sources_source_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SourceGet"][];
                };
            };
        };
    };
    create_source_source_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SourcePost"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SourceGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_source_source__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SourceGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_source_source__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patch_source_source__id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SourcePatch"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SourceGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_info_user__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserInfoGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user_user__id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserInfoUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
