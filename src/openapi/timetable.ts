/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/timetable/event/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Events */
        get: operations["get_events_event__get"];
        put?: never;
        /** Create Event */
        post: operations["create_event_event__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timetable/event/{event_id}/comment/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Event Comments */
        get: operations["get_event_comments_event__event_id__comment__get"];
        put?: never;
        /** Comment Event */
        post: operations["comment_event_event__event_id__comment__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timetable/event/{event_id}/comment/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Comment */
        get: operations["get_comment_event__event_id__comment__id__get"];
        put?: never;
        post?: never;
        /** Delete Comment */
        delete: operations["delete_comment_event__event_id__comment__id__delete"];
        options?: never;
        head?: never;
        /** Update Comment */
        patch: operations["update_comment_event__event_id__comment__id__patch"];
        trace?: never;
    };
    "/timetable/event/{event_id}/comment/{id}/review/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Review Comment */
        post: operations["review_comment_event__event_id__comment__id__review__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timetable/event/{event_id}/comment/review/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Unreviewed Comments */
        get: operations["get_unreviewed_comments_event__event_id__comment_review__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timetable/event/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Event By Id */
        get: operations["get_event_by_id_event__id__get"];
        put?: never;
        post?: never;
        /** Delete Event */
        delete: operations["delete_event_event__id__delete"];
        options?: never;
        head?: never;
        /** Patch Event */
        patch: operations["patch_event_event__id__patch"];
        trace?: never;
    };
    "/timetable/event/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Events */
        post: operations["create_events_event_bulk_post"];
        /** Delete Events */
        delete: operations["delete_events_event_bulk_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timetable/group/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Groups */
        get: operations["get_groups_group__get"];
        put?: never;
        /** Create Group */
        post: operations["create_group_group__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timetable/group/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Group By Id */
        get: operations["get_group_by_id_group__id__get"];
        put?: never;
        post?: never;
        /** Delete Group */
        delete: operations["delete_group_group__id__delete"];
        options?: never;
        head?: never;
        /** Patch Group */
        patch: operations["patch_group_group__id__patch"];
        trace?: never;
    };
    "/timetable/lecturer/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Lecturers */
        get: operations["get_lecturers_lecturer__get"];
        put?: never;
        /** Create Lecturer */
        post: operations["create_lecturer_lecturer__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timetable/lecturer/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Lecturer By Id */
        get: operations["get_lecturer_by_id_lecturer__id__get"];
        put?: never;
        post?: never;
        /** Delete Lecturer */
        delete: operations["delete_lecturer_lecturer__id__delete"];
        options?: never;
        head?: never;
        /** Patch Lecturer */
        patch: operations["patch_lecturer_lecturer__id__patch"];
        trace?: never;
    };
    "/timetable/lecturer/{lecturer_id}/comment/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timetable/lecturer/{lecturer_id}/comment/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timetable/lecturer/{lecturer_id}/comment/{id}/review/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timetable/lecturer/{lecturer_id}/comment/review/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timetable/lecturer/{lecturer_id}/photo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Lecturer Photos */
        get: operations["get_lecturer_photos_lecturer__lecturer_id__photo_get"];
        put?: never;
        /**
         * Upload Photo
         * @description Загрузить фотографию преподавателя из локального файла
         *
         *     Пример загрузки файла на питоне
         *     ```python
         *     lecturer_id = 123
         *     root = 'https://timetable.api.test.profcomff.com'
         *
         *     with open('./x.png', 'rb') as f:
         *         data = f.read()
         *     requests.post(url=f'{root}/timetable/lecturer/{lecturer_id}/photo', files={"photo": data})
         *     ```
         */
        post: operations["upload_photo_lecturer__lecturer_id__photo_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timetable/lecturer/{lecturer_id}/photo/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Photo */
        get: operations["get_photo_lecturer__lecturer_id__photo__id__get"];
        put?: never;
        post?: never;
        /** Delete Photo */
        delete: operations["delete_photo_lecturer__lecturer_id__photo__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timetable/lecturer/photo/review": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Unreviewed Photos */
        get: operations["get_unreviewed_photos_lecturer_photo_review_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timetable/lecturer/photo/review/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Review Photo */
        post: operations["review_photo_lecturer_photo_review__id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timetable/room/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Rooms */
        get: operations["get_rooms_room__get"];
        put?: never;
        /** Create Room */
        post: operations["create_room_room__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timetable/room/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Room By Id */
        get: operations["get_room_by_id_room__id__get"];
        put?: never;
        post?: never;
        /** Delete Room */
        delete: operations["delete_room_room__id__delete"];
        options?: never;
        head?: never;
        /** Patch Room */
        patch: operations["patch_room_room__id__patch"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Action */
        Action: {
            action: components["schemas"]["ApproveStatuses"];
        };
        /**
         * ApproveStatuses
         * @enum {string}
         */
        ApproveStatuses: "Approved" | "Declined" | "Pending";
        /** Body_upload_photo_lecturer__lecturer_id__photo_post */
        Body_upload_photo_lecturer__lecturer_id__photo_post: {
            /**
             * Photo
             * Format: binary
             */
            photo: string;
        };
        /** CommentEventGet */
        CommentEventGet: {
            /** Author Name */
            author_name: string;
            /**
             * Create Ts
             * Format: date-time
             */
            create_ts: string;
            /** Event Id */
            event_id: number;
            /** Id */
            id: number;
            /** Text */
            text: string;
            /**
             * Update Ts
             * Format: date-time
             */
            update_ts: string;
        };
        /** CommentLecturer */
        CommentLecturer: {
            /** Author Name */
            author_name: string;
            /**
             * Create Ts
             * Format: date-time
             */
            create_ts: string;
            /** Id */
            id: number;
            /** Lecturer Id */
            lecturer_id: number;
            /** Text */
            text: string;
            /**
             * Update Ts
             * Format: date-time
             */
            update_ts: string;
        };
        /**
         * Direction
         * @enum {string}
         */
        Direction: "North" | "South";
        /** Event */
        Event: {
            /**
             * End Ts
             * Format: date-time
             */
            end_ts: string;
            /** Group */
            group: components["schemas"]["GroupGet"][];
            /** Id */
            id: number;
            /** Lecturer */
            lecturer: components["schemas"]["LecturerGet"][];
            /** Name */
            name: string;
            /** Room */
            room: components["schemas"]["RoomGet"][];
            /**
             * Start Ts
             * Format: date-time
             */
            start_ts: string;
        };
        /** EventCommentPatch */
        EventCommentPatch: {
            /** Author Name */
            author_name?: string | null;
            /** Text */
            text?: string | null;
        };
        /** EventCommentPost */
        EventCommentPost: {
            /** Author Name */
            author_name: string;
            /** Text */
            text: string;
        };
        /** EventComments */
        EventComments: {
            /** Items */
            items: components["schemas"]["CommentEventGet"][];
            /** Limit */
            limit: number;
            /** Offset */
            offset: number;
            /** Total */
            total: number;
        };
        /** EventGet */
        EventGet: {
            /**
             * End Ts
             * Format: date-time
             */
            end_ts: string;
            /** Group */
            group: components["schemas"]["GroupGet"][];
            /** Id */
            id: number;
            /** Lecturer */
            lecturer: components["schemas"]["LecturerGet"][];
            /** Name */
            name: string;
            /** Room */
            room: components["schemas"]["RoomGet"][];
            /**
             * Start Ts
             * Format: date-time
             */
            start_ts: string;
        };
        /** EventPatch */
        EventPatch: {
            /** End Ts */
            end_ts?: string | null;
            /** Group Id */
            group_id?: number[] | null;
            /** Lecturer Id */
            lecturer_id?: number[] | null;
            /** Name */
            name?: string | null;
            /** Room Id */
            room_id?: number[] | null;
            /** Start Ts */
            start_ts?: string | null;
        };
        /** EventPost */
        EventPost: {
            /**
             * End Ts
             * Format: date-time
             */
            end_ts: string;
            /** Group Id */
            group_id: number[];
            /** Lecturer Id */
            lecturer_id: number[];
            /** Name */
            name: string;
            /** Room Id */
            room_id: number[];
            /**
             * Start Ts
             * Format: date-time
             */
            start_ts: string;
        };
        /** GetListEvent */
        GetListEvent: {
            /** Items */
            items: components["schemas"]["Event"][];
            /** Limit */
            limit: number;
            /** Offset */
            offset: number;
            /** Total */
            total: number;
        };
        /** GetListGroup */
        GetListGroup: {
            /** Items */
            items: components["schemas"]["GroupGet"][];
            /** Limit */
            limit: number;
            /** Offset */
            offset: number;
            /** Total */
            total: number;
        };
        /** GetListLecturer */
        GetListLecturer: {
            /** Items */
            items: components["schemas"]["LecturerGet"][];
            /** Limit */
            limit: number;
            /** Offset */
            offset: number;
            /** Total */
            total: number;
        };
        /** GetListRoom */
        GetListRoom: {
            /** Items */
            items: components["schemas"]["RoomGet"][];
            /** Limit */
            limit: number;
            /** Offset */
            offset: number;
            /** Total */
            total: number;
        };
        /** GroupGet */
        GroupGet: {
            /** Id */
            id: number;
            /** Name */
            name?: string | null;
            /** Number */
            number: string;
        };
        /** GroupPatch */
        GroupPatch: {
            /** Name */
            name?: string | null;
            /** Number */
            number?: string | null;
        };
        /** GroupPost */
        GroupPost: {
            /** Name */
            name?: string | null;
            /** Number */
            number: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** LecturerCommentPatch */
        LecturerCommentPatch: {
            /** Author Name */
            author_name?: string | null;
            /** Text */
            text?: string | null;
        };
        /** LecturerCommentPost */
        LecturerCommentPost: {
            /** Author Name */
            author_name: string;
            /** Text */
            text: string;
        };
        /** LecturerComments */
        LecturerComments: {
            /** Items */
            items: components["schemas"]["CommentLecturer"][];
            /** Limit */
            limit: number;
            /** Offset */
            offset: number;
            /** Total */
            total: number;
        };
        /** LecturerGet */
        LecturerGet: {
            /** Avatar Id */
            avatar_id?: number | null;
            /** Avatar Link */
            avatar_link?: string | null;
            /** Description */
            description?: string | null;
            /** First Name */
            first_name: string;
            /** Id */
            id: number;
            /** Last Name */
            last_name: string;
            /** Middle Name */
            middle_name: string;
        };
        /** LecturerPatch */
        LecturerPatch: {
            /** Avatar Id */
            avatar_id?: number | null;
            /** Description */
            description?: string | null;
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /** Middle Name */
            middle_name?: string | null;
        };
        /** LecturerPhotos */
        LecturerPhotos: {
            /** Items */
            items: string[];
            /** Limit */
            limit: number;
            /** Offset */
            offset: number;
            /** Total */
            total: number;
        };
        /** LecturerPost */
        LecturerPost: {
            /** Description */
            description?: string | null;
            /** First Name */
            first_name: string;
            /** Last Name */
            last_name: string;
            /** Middle Name */
            middle_name: string;
        };
        /** Photo */
        Photo: {
            /** Id */
            id: number;
            /** Lecturer Id */
            lecturer_id: number;
            /** Link */
            link: string;
        };
        /** PhotoListResponse */
        PhotoListResponse: {
            /** Items */
            items: components["schemas"]["Photo"][];
            /** Limit */
            limit: number;
            /** Offset */
            offset: number;
            /** Total */
            total: number;
        };
        /** RoomGet */
        RoomGet: {
            /** Building */
            building?: string | null;
            /** Building Url */
            building_url?: string | null;
            /** Direction */
            direction?: string | null;
            /** Id */
            id: number;
            /** Name */
            name: string;
        };
        /** RoomPatch */
        RoomPatch: {
            /** Building */
            building?: string | null;
            /** Building Url */
            building_url?: string | null;
            direction?: components["schemas"]["Direction"] | null;
            /** Name */
            name?: string | null;
        };
        /** RoomPost */
        RoomPost: {
            /** Building */
            building?: string | null;
            /** Building Url */
            building_url?: string | null;
            direction?: components["schemas"]["Direction"] | null;
            /** Name */
            name: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_events_event__get: {
        parameters: {
            query?: {
                detail?: ("comment" | "description" | "")[] | null;
                /** @description Default: Tomorrow */
                end?: string | null;
                format?: "json" | "ics";
                group_id?: number | null;
                lecturer_id?: number | null;
                limit?: number;
                offset?: number;
                room_id?: number | null;
                /** @description Default: Today */
                start?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListEvent"] | null;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_event_event__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventPost"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_event_comments_event__event_id__comment__get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventComments"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    comment_event_event__event_id__comment__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventCommentPost"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentEventGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_comment_event__event_id__comment__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentEventGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_comment_event__event_id__comment__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_comment_event__event_id__comment__id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventCommentPatch"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentEventGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    review_comment_event__event_id__comment__id__review__post: {
        parameters: {
            query?: {
                action?: "Approved" | "Declined";
            };
            header?: never;
            path: {
                event_id: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentEventGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_unreviewed_comments_event__event_id__comment_review__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentEventGet"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_event_by_id_event__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_event_event__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patch_event_event__id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventPatch"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_events_event_bulk_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventPost"][];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventGet"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_events_event_bulk_delete: {
        parameters: {
            query: {
                end: string;
                start: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_groups_group__get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                query?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListGroup"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_group_group__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupPost"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_group_by_id_group__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_group_group__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patch_group_group__id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupPatch"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_lecturers_lecturer__get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                order_by?: ("first_name" | "last_name") | null;
                query?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListLecturer"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_lecturer_lecturer__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LecturerPost"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LecturerGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_lecturer_by_id_lecturer__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LecturerGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_lecturer_lecturer__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patch_lecturer_lecturer__id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LecturerPatch"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LecturerGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_lecturer_photos_lecturer__lecturer_id__photo_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: never;
            path: {
                lecturer_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LecturerPhotos"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_photo_lecturer__lecturer_id__photo_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lecturer_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_photo_lecturer__lecturer_id__photo_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Photo"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_photo_lecturer__lecturer_id__photo__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
                lecturer_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Photo"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_photo_lecturer__lecturer_id__photo__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
                lecturer_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_unreviewed_photos_lecturer_photo_review_get: {
        parameters: {
            query?: {
                lecturer_id?: number;
                limit?: number;
                offset?: number;
                order_by?: "lecturer_id" | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PhotoListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    review_photo_lecturer_photo_review__id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Action"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Photo"] | null;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_rooms_room__get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                query?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListRoom"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_room_room__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoomPost"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_room_by_id_room__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_room_room__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patch_room_room__id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoomPatch"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
