/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/rental/event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Events */
        get: operations["get_events_event_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rental/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Items
         * @description Получает список предметов. Если указан type_id, возвращает только предметы с этим типом.
         *
         *     :param type_id: Идентификатор типа предмета (опционально).
         *     :return: Список объектов ItemGet с информацией о предметах.
         */
        get: operations["get_items_items_get"];
        put?: never;
        /**
         * Create Item
         * @description Создает новый предмет.
         *
         *     :param item: Данные для создания нового предмета.
         *     :return: Объект ItemGet с информацией о созданном предмете.
         *     :raises ObjectNotFound: Если тип предмета с указанным type_id не найден.
         */
        post: operations["create_item_items_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rental/items/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Item
         * @description Обновляет статус доступности предмета по его идентификатору.
         *
         *     :param id: id предмета.
         *     :param is_available: Флаг, указывающий? какой статус поставить предмету.
         *     :return: Объект ItemGet с обновленной информацией о предмете.
         *     :raises ObjectNotFound: Если предмет с указанным id не найден.
         */
        patch: operations["update_item_items__id__patch"];
        trace?: never;
    };
    "/rental/items/item/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Item
         * @description Удаляет предмет по его id.
         *
         *     :param id: id предмета.
         *     :return: Объект StatusResponseModel с результатом выполнения операции.
         *     :raises ObjectNotFound: Если предмет с указанным идентификатором не найден.
         */
        delete: operations["delete_item_items_item__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rental/itemtype": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Items Types
         * @description Получает список всех типов предметов.
         *
         *     :return: Список объектов ItemTypeGet с информацией о всех типах предметов.
         *     :raises ObjectNotFound: Если типы предметов не найдены.
         */
        get: operations["get_items_types_itemtype_get"];
        put?: never;
        /**
         * Create Item Type
         * @description Создает новый тип предмета.
         *
         *     :param item_type_info: Данные для создания нового типа предмета.
         *     :return: Объект ItemTypeGet с информацией о созданном типе предмета.
         */
        post: operations["create_item_type_itemtype_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rental/itemtype/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Item Type
         * @description Получает информацию о типе предмета по его id.
         *
         *     :param id: Идентификатор типа предмета.
         *     :return: Объект ItemTypeGet с информацией о типе предмета.
         *     :raises ObjectNotFound: Если тип предмета с указанным идентификатором не найден.
         */
        get: operations["get_item_type_itemtype__id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Item Type
         * @description Удаляет тип предмета по его id и все предметы этого типа.
         *
         *     :param id: Идентификатор типа предмета.
         *     :param user: Пользователь, авторизованный для выполнения действия.
         *     :return: Объект StatusResponseModel с результатом выполнения операции.
         *     :raises ObjectNotFound: Если тип предмета с указанным идентификатором не найден.
         */
        delete: operations["delete_item_type_itemtype__id__delete"];
        options?: never;
        head?: never;
        /**
         * Update Item Type
         * @description Обновляет информацию о типе предмета по его идентификатору.
         *
         *     :param id: Идентификатор типа предмета.
         *     :param item_type_info: Данные для обновления типа предмета.
         *     :return: Объект ItemTypeGet с обновленной информацией о типе предмета.
         *     :raises ObjectNotFound: Если тип предмета с указанным идентификатором не найден.
         */
        patch: operations["update_item_type_itemtype__id__patch"];
        trace?: never;
    };
    "/rental/rental-sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Rental Sessions
         * @description Получает список сессий аренды с возможностью фильтрации по статусу.
         *
         *     :param is_reserved: Флаг, показывать зарезервированные сессии.
         *     :param is_canceled: Флаг, показывать отмененные сессии.
         *     :param is_dismissed: Флаг, показывать отклоненные сессии.
         *     :param is_overdue: Флаг, показывать просроченные сессии.
         *     :param is_returned: Флаг, показывать возвращенные сессии.
         *     :param is_active: Флаг, показывать активные сессии.
         *     :return: Список объектов RentalSessionGet с информацией о сессиях аренды.
         */
        get: operations["get_rental_sessions_rental_sessions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rental/rental-sessions/{item_type_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Rental Session
         * @description Создает новую сессию аренды для указанного типа предмета.
         *
         *     :param item_type_id: Идентификатор типа предмета.
         *     :param background_tasks: Фоновые задачи для выполнения.
         *     :return: Объект RentalSessionGet с информацией о созданной сессии аренды.
         *     :raises NoneAvailable: Если нет доступных предметов указанного типа.
         */
        post: operations["create_rental_session_rental_sessions__item_type_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rental/rental-sessions/{session_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Rental Session */
        get: operations["get_rental_session_rental_sessions__session_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Rental Session
         * @description Обновляет информацию о сессии аренды.
         *
         *     :param session_id: Идентификатор сессии аренды.
         *     :param update_data: Данные для обновления сессии.
         *     :return: Объект RentalSessionGet с обновленной информацией о сессии аренды.
         *     :raises ObjectNotFound: Если сессия с указанным идентификатором не найдена.
         */
        patch: operations["update_rental_session_rental_sessions__session_id__patch"];
        trace?: never;
    };
    "/rental/rental-sessions/{session_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Cancel Rental Session
         * @description Отменяет сессию в статусе RESERVED. Отменить может только сам юзер
         *
         *     :param session_id: Идентификатор сессии аренды
         *     :raises ForbiddenAction: Если пользователь не владелец или статус не RESERVED
         *     :return: Объект отмененной сессии аренды
         */
        delete: operations["cancel_rental_session_rental_sessions__session_id__cancel_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rental/rental-sessions/{session_id}/return": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Accept End Rental Session
         * @description Завершает сессию аренды, изменяя её статус на RETURNED. При необходимости выдает страйк.
         *     :param session_id: Идентификатор сессии аренды.
         *     :param with_strike: Флаг, указывающий, нужно ли выдать страйк.
         *     :param strike_reason: Причина выдачи страйка.
         *     :return: Объект RentalSessionGet с обновленной информацией о сессии аренды.
         *     :raises ObjectNotFound: Если сессия с указанным идентификатором не найдена.
         *     :raises InactiveSession: Если сессия не активна.
         */
        patch: operations["accept_end_rental_session_rental_sessions__session_id__return_patch"];
        trace?: never;
    };
    "/rental/rental-sessions/{session_id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Start Rental Session
         * @description Начинает сессию аренды, изменяя её статус на ACTIVE.
         *
         *     :param session_id: Идентификатор сессии аренды.
         *
         *     :return: Объект RentalSessionGet с обновленной информацией о сессии аренды.
         *     :raises ObjectNotFound: Если сессия с указанным идентификатором не найдена.
         */
        patch: operations["start_rental_session_rental_sessions__session_id__start_patch"];
        trace?: never;
    };
    "/rental/rental-sessions/user/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Sessions
         * @description Получает список сессий аренды для указанного пользователя.
         *
         *     :param user_id: id пользователя.
         *     :return: Список объектов RentalSessionGet с информацией о сессиях аренды.
         */
        get: operations["get_user_sessions_rental_sessions_user__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rental/strike": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Strikes */
        get: operations["get_strikes_strike_get"];
        put?: never;
        /** Create Strike */
        post: operations["create_strike_strike_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rental/strike/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Strike */
        delete: operations["delete_strike_strike__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rental/strike/user/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Strikes */
        get: operations["get_user_strikes_strike_user__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** EventGet */
        EventGet: {
            /** Action Type */
            action_type: string;
            /** Admin Id */
            admin_id?: number | null;
            /**
             * Create Ts
             * Format: date-time
             */
            create_ts: string;
            /** Details */
            details: {
                [key: string]: unknown;
            };
            /** Id */
            id: number;
            /** Session Id */
            session_id?: number | null;
            /** User Id */
            user_id?: number | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** ItemGet */
        ItemGet: {
            /** Id */
            id: number;
            /**
             * Is Available
             * @default false
             */
            is_available: boolean;
            /** Type Id */
            type_id: number;
        };
        /** ItemPost */
        ItemPost: {
            /**
             * Is Available
             * @default false
             */
            is_available: boolean;
            /** Type Id */
            type_id: number;
        };
        /** ItemTypeGet */
        ItemTypeGet: {
            /** Description */
            description?: string | null;
            /** Free Items Count */
            free_items_count?: number | null;
            /** Id */
            id: number;
            /** Image Url */
            image_url?: string | null;
            /** Name */
            name: string;
        };
        /** ItemTypePost */
        ItemTypePost: {
            /** Description */
            description?: string | null;
            /** Image Url */
            image_url?: string | null;
            /** Name */
            name: string;
        };
        /** RentalSessionGet */
        RentalSessionGet: {
            /** Actual Return Ts */
            actual_return_ts: string | null;
            /** Admin Close Id */
            admin_close_id: number | null;
            /** Admin Open Id */
            admin_open_id: number | null;
            /** End Ts */
            end_ts: string | null;
            /** Id */
            id: number;
            /** Item Id */
            item_id: number;
            /**
             * Reservation Ts
             * Format: date-time
             */
            reservation_ts: string;
            /** Start Ts */
            start_ts: string | null;
            status: components["schemas"]["RentStatus"];
            /** User Id */
            user_id: number;
        };
        /** RentalSessionPatch */
        RentalSessionPatch: {
            /** Actual Return Ts */
            actual_return_ts?: string | null;
            /** Admin Close Id */
            admin_close_id?: number | null;
            /** End Ts */
            end_ts?: string | null;
            status?: components["schemas"]["RentStatus"] | null;
        };
        /**
         * RentStatus
         * @enum {string}
         */
        RentStatus: "reserved" | "active" | "canceled" | "overdue" | "returned" | "dismissed";
        /** StatusResponseModel */
        StatusResponseModel: {
            /** Message */
            message: string;
            /** Ru */
            ru: string;
            /** Status */
            status: string;
        };
        /** StrikeGet */
        StrikeGet: {
            /** Admin Id */
            admin_id: number;
            /**
             * Created Ts
             * Format: date-time
             */
            created_ts: string;
            /** Id */
            id: number;
            /** Reason */
            reason: string;
            /** Session Id */
            session_id?: number | null;
            /** User Id */
            user_id: number;
        };
        /** StrikePost */
        StrikePost: {
            /** Admin Id */
            admin_id: number;
            /** Reason */
            reason: string;
            /** Session Id */
            session_id?: number | null;
            /** User Id */
            user_id: number;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_events_event_get: {
        parameters: {
            query?: {
                admin_id?: number | null;
                session_id?: number | null;
                user_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventGet"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_items_items_get: {
        parameters: {
            query?: {
                type_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemGet"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_item_items_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemPost"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_item_items__id__patch: {
        parameters: {
            query?: {
                /** @description Флаг доступен ли предмет */
                is_available?: boolean;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_item_items_item__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_items_types_itemtype_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemTypeGet"][];
                };
            };
        };
    };
    create_item_type_itemtype_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemTypePost"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemTypeGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_item_type_itemtype__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemTypeGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_item_type_itemtype__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_item_type_itemtype__id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemTypePost"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemTypeGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_rental_sessions_rental_sessions_get: {
        parameters: {
            query?: {
                /** @description Флаг, показывать активные */
                is_active?: boolean;
                /** @description Флаг, показывать отмененные */
                is_canceled?: boolean;
                /** @description Флаг, показывать отклоненные */
                is_dismissed?: boolean;
                /** @description Флаг, показывать просроченные */
                is_overdue?: boolean;
                /** @description флаг, показывать заявки */
                is_reserved?: boolean;
                /** @description Флаг, показывать вернутые */
                is_returned?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RentalSessionGet"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_rental_session_rental_sessions__item_type_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item_type_id: unknown;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RentalSessionGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_rental_session_rental_sessions__session_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RentalSessionGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_rental_session_rental_sessions__session_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RentalSessionPatch"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RentalSessionGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancel_rental_session_rental_sessions__session_id__cancel_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RentalSessionGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    accept_end_rental_session_rental_sessions__session_id__return_patch: {
        parameters: {
            query?: {
                /** @description Описание причины страйка */
                strike_reason?: string;
                /** @description Флаг, определяющий выдачу страйка */
                with_strike?: boolean;
            };
            header?: never;
            path: {
                session_id: unknown;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RentalSessionGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    start_rental_session_rental_sessions__session_id__start_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: unknown;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RentalSessionGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_sessions_rental_sessions_user__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: unknown;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RentalSessionGet"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_strikes_strike_get: {
        parameters: {
            query?: {
                admin_id?: number | null;
                from_date?: string | null;
                session_id?: number | null;
                to_date?: string | null;
                user_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StrikeGet"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_strike_strike_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StrikePost"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StrikeGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_strike_strike__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_strikes_strike_user__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StrikeGet"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
