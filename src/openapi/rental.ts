/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/rental/event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Events
         * @description Retrieves a list of events, with optional filtering.
         *
         *     Scopes: `["rental.event.view"]`
         *
         *     - **admin_id**: Filter events by admin ID.
         *     - **session_id**: Filter events by session ID.
         *
         *     Returns a list of events.
         */
        get: operations["get_events_event_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rental/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Items
         * @description Retrieves a list of items. If `type_id` is specified, only items of that type are returned.
         *
         *     - **type_id**: The ID of the item type (optional).
         *
         *     Returns a list of items.
         */
        get: operations["get_items_item_get"];
        put?: never;
        /**
         * Create Item
         * @description Creates a new item.
         *
         *     Scopes: `["rental.item.create"]`
         *
         *     - **item**: The data for the new item.
         *
         *     Returns the created item.
         *
         *     Raises **ObjectNotFound** if the item type with the specified `type_id` is not found.
         */
        post: operations["create_item_item_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rental/item/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Item
         * @description Получает предмет по его идентификатору.
         */
        get: operations["get_item_item__id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Item
         * @description Deletes an item by its ID.
         *
         *     Scopes: `["rental.item.delete"]`
         *
         *     - **id**: The ID of the item.
         *
         *     Returns a status response.
         *
         *     Raises **ObjectNotFound** if the item with the specified ID is not found.
         */
        delete: operations["delete_item_item__id__delete"];
        options?: never;
        head?: never;
        /**
         * Update Item
         * @description Updates the availability status of an item by its ID.
         *
         *     Scopes: `["rental.item.patch"]`
         *
         *     - **id**: The ID of the item.
         *     - **is_available**: The new availability status for the item.
         *
         *     Returns the updated item.
         *
         *     Raises **ObjectNotFound** if the item with the specified ID is not found.
         */
        patch: operations["update_item_item__id__patch"];
        trace?: never;
    };
    "/rental/itemtype": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Items Types
         * @description Retrieves a list of all item types.
         *
         *     Returns a list of all item types.
         *
         *     Raises **ObjectNotFound** if no item types are found.
         */
        get: operations["get_items_types_itemtype_get"];
        put?: never;
        /**
         * Create Item Type
         * @description Creates a new item type.
         *
         *     Scopes: `["rental.item_type.create"]`
         *
         *     - **item_type_info**: The data for the new item type.
         *
         *     Returns the created item type.
         */
        post: operations["create_item_type_itemtype_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rental/itemtype/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Item Type
         * @description Retrieves information about an item type by its ID.
         *
         *     - **id**: The ID of the item type.
         *
         *     Returns the item type information.
         *
         *     Raises **ObjectNotFound** if the item type with the specified ID is not found.
         */
        get: operations["get_item_type_itemtype__id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Item Type
         * @description Deletes an item type by its ID.
         *
         *     Scopes: `["rental.item_type.delete"]`
         *
         *     - **id**: The ID of the item type.
         *
         *     Returns a status response.
         *
         *     Raises **ObjectNotFound** if the item type with the specified ID is not found.
         */
        delete: operations["delete_item_type_itemtype__id__delete"];
        options?: never;
        head?: never;
        /**
         * Update Item Type
         * @description Updates the information of an item type by its ID.
         *
         *     Scopes: `["rental.item_type.update"]`
         *
         *     - **id**: The ID of the item type.
         *     - **item_type_info**: The data to update the item type with.
         *
         *     Returns the updated item type.
         *
         *     Raises **ObjectNotFound** if the item type with the specified ID is not found.
         */
        patch: operations["update_item_type_itemtype__id__patch"];
        trace?: never;
    };
    "/rental/itemtype/available/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Make Item Type Available
         * @description Делает один предмет доступным по ID типа предмета.
         *
         *     Скоупы: `["rental.item_type.update"]`
         *
         *     - **id**: ID типа предмета.
         *     - **count**: Абсолютное количество предметов, которые нужно сделать доступными.
         *     Если доступных меньше, делает больше доступных. Если доступных больше, делает меньше доступных.
         *     Если нет возможности сделать count доступных, делает доступным максимально возможное количество.
         *     Возвращает id всех возвращенных предметов и их количество.
         *
         *
         *
         *     Вызывает **ObjectNotFound**, если тип предмета с указанным ID не найден.
         */
        patch: operations["make_item_type_available_itemtype_available__id__patch"];
        trace?: never;
    };
    "/rental/rental-sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Rental Sessions
         * @description Retrieves a list of rental sessions with optional status filtering.
         *
         *     Scopes: `["rental.session.admin"]`
         *
         *     - **is_reserved**: Filter by reserved sessions.
         *     - **is_canceled**: Filter by canceled sessions.
         *     - **is_dismissed**: Filter by dismissed sessions.
         *     - **is_overdue**: Filter by overdue sessions.
         *     - **is_returned**: Filter by returned sessions.
         *     - **is_active**: Filter by active sessions.
         *     - **is_expired**: Filter by expired sessions.
         *     - **user_id**: User_id to get sessions
         *     Returns a list of rental sessions.
         */
        get: operations["get_rental_sessions_rental_sessions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rental/rental-sessions/{item_type_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Rental Session
         * @description Создает новую сессию аренды для указанного типа предмета.
         *
         *     :param item_type_id: Идентификатор типа предмета.
         *     :raises NoneAvailable: Если нет доступных предметов указанного типа.
         *     :raises SessionExists: Если у пользователя уже есть сессия с указанным типом предмета.
         */
        post: operations["create_rental_session_rental_sessions__item_type_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rental/rental-sessions/{session_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Rental Session */
        get: operations["get_rental_session_rental_sessions__session_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Rental Session
         * @description Updates the information of a rental session.
         *
         *     Scopes: `["rental.session.admin"]`
         *
         *     - **session_id**: The ID of the rental session to update.
         *     - **update_data**: The data to update the session with.
         *
         *     Returns the updated rental session.
         *
         *     Raises **ObjectNotFound** if the session with the specified ID is not found.
         */
        patch: operations["update_rental_session_rental_sessions__session_id__patch"];
        trace?: never;
    };
    "/rental/rental-sessions/{session_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Cancel Rental Session
         * @description Cancels a session in the RESERVED status. Can only be canceled by the user who created it.
         *
         *     - **session_id**: The ID of the rental session to cancel.
         *
         *     Returns the canceled rental session.
         *
         *     Raises **ForbiddenAction** if the user is not the owner or the session is not in RESERVED status.
         */
        delete: operations["cancel_rental_session_rental_sessions__session_id__cancel_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rental/rental-sessions/{session_id}/return": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Accept End Rental Session
         * @description Ends a rental session, changing its status to RETURNED. Issues a strike if specified.
         *
         *     Scopes: `["rental.session.admin"]`
         *
         *     - **session_id**: The ID of the rental session to end.
         *     - **with_strike**: A flag indicating whether to issue a strike.
         *     - **strike_reason**: The reason for the strike.
         *
         *     Returns the updated rental session.
         *
         *     Raises:
         *     - **ObjectNotFound**: If the session with the specified ID is not found.
         *     - **InactiveSession**: If the session is not active.
         */
        patch: operations["accept_end_rental_session_rental_sessions__session_id__return_patch"];
        trace?: never;
    };
    "/rental/rental-sessions/{session_id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Start Rental Session
         * @description Starts a rental session, changing its status to ACTIVE.
         *
         *     Scopes: `["rental.session.admin"]`
         *
         *     - **session_id**: The ID of the rental session to start.
         *
         *     Returns the updated rental session.
         *
         *     Raises **ObjectNotFound** if the session with the specified ID is not found.
         */
        patch: operations["start_rental_session_rental_sessions__session_id__start_patch"];
        trace?: never;
    };
    "/rental/rental-sessions/user/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get My Sessions
         * @description Retrieves a list of rental sessions for the user with optional status filtering.
         *
         *     - **is_reserved**: Filter by reserved sessions.
         *     - **is_canceled**: Filter by canceled sessions.
         *     - **is_dismissed**: Filter by dismissed sessions.
         *     - **is_overdue**: Filter by overdue sessions.
         *     - **is_returned**: Filter by returned sessions.
         *     - **is_active**: Filter by active sessions.
         *     - **is_expired**: Filter by expired sessions.
         *     Returns a list of rental sessions.
         */
        get: operations["get_my_sessions_rental_sessions_user_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rental/strike": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Strikes
         * @description Retrieves a list of strikes with optional filtering.
         *
         *     Scopes: `["rental.strike.read"]`
         *
         *     - **admin_id**: Filter strikes by admin ID.
         *     - **session_id**: Filter strikes by session ID.
         *     - **from_date**: Filter strikes created after this date.
         *     - **to_date**: Filter strikes created before this date.
         *
         *     Returns a list of strikes.
         *
         *     Raises **DateRangeError** if only one of `from_date` or `to_date` is provided.
         */
        get: operations["get_strikes_strike_get"];
        put?: never;
        /**
         * Create Strike
         * @description Creates a new strike.
         *
         *     Scopes: `["rental.strike.create"]`
         *
         *     - **strike_info**: The data for the new strike.
         *
         *     Returns the created strike.
         */
        post: operations["create_strike_strike_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rental/strike/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Strike
         * @description Deletes a strike by its ID.
         *
         *     Scopes: `["rental.strike.delete"]`
         *
         *     - **id**: The ID of the strike to delete.
         *
         *     Returns a status response.
         *
         *     Raises **ObjectNotFound** if the strike with the specified ID is not found.
         */
        delete: operations["delete_strike_strike__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rental/strike/user/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Strikes
         * @description Retrieves a list of strikes for a specific user.
         *
         *     - **user_id**: The ID of the user.
         *
         *     Returns a list of strikes.
         */
        get: operations["get_user_strikes_strike_user__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** EventGet */
        EventGet: {
            /** Action Type */
            action_type: string;
            /** Admin Id */
            admin_id?: number | null;
            /**
             * Create Ts
             * Format: date-time
             */
            create_ts: string;
            /** Details */
            details: {
                [key: string]: unknown;
            };
            /** Id */
            id: number;
            /** Session Id */
            session_id?: number | null;
            /** User Id */
            user_id?: number | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** ItemGet */
        ItemGet: {
            /** Id */
            id: number;
            /**
             * Is Available
             * @default false
             */
            is_available: boolean;
            /** Type Id */
            type_id: number;
        };
        /** ItemPost */
        ItemPost: {
            /**
             * Is Available
             * @default false
             */
            is_available: boolean;
            /** Type Id */
            type_id: number;
        };
        /** ItemTypeAvailable */
        ItemTypeAvailable: {
            /** Item Ids */
            item_ids: number[];
            /** Items Changed */
            items_changed: number;
            /** Total Available */
            total_available: number;
        };
        /** ItemTypeGet */
        ItemTypeGet: {
            /** Availability */
            availability?: boolean | null;
            /** Description */
            description?: string | null;
            /** Free Items Count */
            free_items_count?: number | null;
            /** Id */
            id: number;
            /** Image Url */
            image_url?: string | null;
            /** Name */
            name: string;
        };
        /** ItemTypePost */
        ItemTypePost: {
            /** Description */
            description?: string | null;
            /** Image Url */
            image_url?: string | null;
            /** Name */
            name: string;
        };
        /** RentalSessionGet */
        RentalSessionGet: {
            /** Actual Return Ts */
            actual_return_ts: string | null;
            /** Admin Close Id */
            admin_close_id: number | null;
            /** Admin Open Id */
            admin_open_id: number | null;
            /** End Ts */
            end_ts: string | null;
            /** Id */
            id: number;
            /** Item Id */
            item_id: number;
            /** Item Type Id */
            item_type_id: number;
            /**
             * Reservation Ts
             * Format: date-time
             */
            reservation_ts: string;
            /** Start Ts */
            start_ts: string | null;
            status: components["schemas"]["RentStatus"];
            /** Strike Id */
            strike_id?: number | null;
            /** User Id */
            user_id: number;
            /** User Phone */
            user_phone?: string | null;
        };
        /** RentalSessionPatch */
        RentalSessionPatch: {
            /** Actual Return Ts */
            actual_return_ts?: string | null;
            /** Admin Close Id */
            admin_close_id?: number | null;
            /** End Ts */
            end_ts?: string | null;
            status?: components["schemas"]["RentStatus"] | null;
        };
        /**
         * RentStatus
         * @enum {string}
         */
        RentStatus: "reserved" | "active" | "canceled" | "overdue" | "returned" | "dismissed" | "expired";
        /** StatusResponseModel */
        StatusResponseModel: {
            /** Message */
            message: string;
            /** Ru */
            ru: string;
            /** Status */
            status: string;
        };
        /** StrikeGet */
        StrikeGet: {
            /** Admin Id */
            admin_id: number;
            /**
             * Create Ts
             * Format: date-time
             */
            create_ts: string;
            /** Id */
            id: number;
            /** Reason */
            reason: string;
            /** Session Id */
            session_id?: number | null;
            /** User Id */
            user_id: number;
        };
        /** StrikePost */
        StrikePost: {
            /** Admin Id */
            admin_id: number;
            /** Reason */
            reason: string;
            /** Session Id */
            session_id?: number | null;
            /** User Id */
            user_id: number;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_events_event_get: {
        parameters: {
            query?: {
                admin_id?: number | null;
                session_id?: number | null;
                user_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventGet"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_items_item_get: {
        parameters: {
            query?: {
                type_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemGet"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_item_item_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemPost"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_item_item__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_item_item__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_item_item__id__patch: {
        parameters: {
            query?: {
                /** @description Flag indicating if the item is available */
                is_available?: boolean;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_items_types_itemtype_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemTypeGet"][];
                };
            };
        };
    };
    create_item_type_itemtype_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemTypePost"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemTypeGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_item_type_itemtype__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemTypeGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_item_type_itemtype__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_item_type_itemtype__id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemTypePost"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemTypeGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    make_item_type_available_itemtype_available__id__patch: {
        parameters: {
            query: {
                count: number;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemTypeAvailable"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_rental_sessions_rental_sessions_get: {
        parameters: {
            query?: {
                /** @description Флаг, показывать активные */
                is_active?: boolean;
                /** @description Флаг, показывать отмененные */
                is_canceled?: boolean;
                /** @description Флаг, показывать отклоненные */
                is_dismissed?: boolean;
                /** @description Флаг, показывать просроченные */
                is_expired?: boolean;
                /** @description Флаг, показывать просроченные */
                is_overdue?: boolean;
                /** @description флаг, показывать заявки */
                is_reserved?: boolean;
                /** @description Флаг, показывать вернутые */
                is_returned?: boolean;
                /** @description ID типа предмета */
                item_type_id?: number;
                /** @description User_id для получения сессий */
                user_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RentalSessionGet"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_rental_session_rental_sessions__item_type_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item_type_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RentalSessionGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_rental_session_rental_sessions__session_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RentalSessionGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_rental_session_rental_sessions__session_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RentalSessionPatch"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RentalSessionGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancel_rental_session_rental_sessions__session_id__cancel_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RentalSessionGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    accept_end_rental_session_rental_sessions__session_id__return_patch: {
        parameters: {
            query?: {
                /** @description The reason for the strike. */
                strike_reason?: string;
                /** @description A flag indicating whether to issue a strike. */
                with_strike?: boolean;
            };
            header?: never;
            path: {
                session_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RentalSessionGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    start_rental_session_rental_sessions__session_id__start_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RentalSessionGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_my_sessions_rental_sessions_user_me_get: {
        parameters: {
            query?: {
                /** @description Флаг, показывать активные */
                is_active?: boolean;
                /** @description Флаг, показывать отмененные */
                is_canceled?: boolean;
                /** @description Флаг, показывать отклоненные */
                is_dismissed?: boolean;
                /** @description Флаг, показывать просроченные */
                is_expired?: boolean;
                /** @description Флаг, показывать просроченные */
                is_overdue?: boolean;
                /** @description флаг, показывать заявки */
                is_reserved?: boolean;
                /** @description Флаг, показывать вернутые */
                is_returned?: boolean;
                /** @description ID типа предмета */
                item_type_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RentalSessionGet"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_strikes_strike_get: {
        parameters: {
            query?: {
                admin_id?: number | null;
                from_date?: string | null;
                session_id?: number | null;
                to_date?: string | null;
                user_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StrikeGet"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_strike_strike_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StrikePost"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StrikeGet"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_strike_strike__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_strikes_strike_user__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StrikeGet"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
